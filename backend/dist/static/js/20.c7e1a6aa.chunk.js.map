{"version":3,"sources":["views/Editors/CodeEditors/_examples.js","views/Editors/CodeEditors/CodeEditors.js"],"names":["sampleCode","markdown","javascript","xml","CodeEditors","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","readOnly","theme","mode","code","setState","editor","options","autofocus","setSize","focus","_this2","lineNumbers","react_default","a","createElement","reactstrap_es","href","className","rel","target","react_codemirror2","ref","node","value","onBeforeChange","data","onChange","metadata","inline","type","bsSize","name","id","e","changeTheme","changeMode","_this3","Component"],"mappings":"mLAmEeA,yDAnEK,CAClBC,SAAU,wQAGVC,WAAY,0IACZC,IAAK,0wDCWDC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAU,EACVC,MAAO,UACPC,KAAM,WACNC,KAAMjB,EAAWC,UANFK,mFAWjBG,KAAKS,SAAS,CACZF,KAAM,MACNC,KAAMjB,EAAWG,MAEfM,KAAKU,OAAOA,OAAOC,QAAQC,YAC7BZ,KAAKU,OAAOA,OAAOG,QAAQ,OAAQ,QACnCb,KAAKU,OAAOA,OAAOI,0CAId,IAAAC,EAAAf,KAEDW,EAAU,CACdK,aAAa,EACbX,SAAUL,KAAKI,MAAMC,SACrBE,KAAMP,KAAKI,MAAMG,KACjBD,MAAON,KAAKI,MAAME,MAClBM,WAAW,GAGb,OACEK,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,kBACa,IACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,+BAA+BC,UAAU,sBAAjD,wBACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACbL,EAAAC,EAAAC,cAAA,KAAGE,KAAK,8CAA8CE,IAAI,sBAAsBC,OAAO,SAASF,UAAU,sBACxGL,EAAAC,EAAAC,cAAA,SAAOG,UAAU,cAAjB,WAINL,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACM,EAAA,aAAD,CACEC,IAAK,SAACC,GAAD,OAAUZ,EAAKL,OAASiB,GAC7BC,MAAO5B,KAAKI,MAAMI,KAClBG,QAASA,EACTkB,eAAgB,SAACnB,EAAQoB,EAAMF,GAAYb,EAAKN,SAAS,CAACmB,WAC1DG,SAAU,SAACrB,EAAQsB,EAAUJ,QAGjCX,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMa,QAAM,GACVhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOc,KAAK,SAASC,OAAO,KAAKC,KAAK,QAAQC,GAAG,QAAQN,SAAU,SAACO,GAAD,OAAOvB,EAAKwB,YAAYD,IAAIV,MAAO5B,KAAKI,MAAME,OAC/GW,EAAAC,EAAAC,cAAA,UAAQS,MAAM,YAAd,YACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,WAAd,aAGNX,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOc,KAAK,SAASC,OAAO,KAAKC,KAAK,OAAOC,GAAG,OAAON,SAAU,SAACO,GAAD,OAAOvB,EAAKyB,WAAWF,IAAIV,MAAO5B,KAAKI,MAAMG,MAC5GU,EAAAC,EAAAC,cAAA,UAAQS,MAAM,YAAd,YACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,cAAd,cACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,OAAd,gDASLU,GACT,IAAM/B,EAAO+B,EAAEd,OAAOI,MACtB5B,KAAKS,SAAS,CACZF,KAAMA,EACNC,KAAMjB,EAAWgB,KAEnBP,KAAKU,OAAOA,OAAOI,4CAGTwB,GACV,IAAMhC,EAAQgC,EAAEd,OAAOI,MACvB5B,KAAKS,SAAS,CACZH,MAAOA,6CAIM,IAAAmC,EAAAzC,KACfA,KAAKS,SAAS,CACZJ,UAAWL,KAAKI,MAAMC,UACrB,WAAQoC,EAAK/B,OAAOA,OAAOI,iBA5FR4B,aAgGX/C","file":"static/js/20.c7e1a6aa.chunk.js","sourcesContent":["const sampleCode =  {\n  markdown: '### [CodeMirror](http://codemirror.net)\\n' +\n  'A versatile _text_ editor implemented in **JavaScript*** for the browser. \\n' +\n  'It is specialized for editing `code`, and comes with a number of language modes and addons that implement more advanced editing functionality.\\n',\n  javascript: 'var component = {\\n\\tname: \"react-codemirror2\",\\n\\tauthor: \"Salvatore Niro\",\\n\\trepo: \"https://github.com/scniro/react-codemirror2\"\\n};',\n  xml: '<!DOCTYPE html>\\n' +\n  '<html lang=\"en\">\\n' +\n  '<head>\\n' +\n  '\\n' +\n  '  <meta charset=\"utf-8\"/>\\n' +\n  '  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\\n' +\n  '  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\\n' +\n  '  <meta name=\"description\" content=\"\"/>\\n' +\n  '  <meta name=\"author\" content=\"Łukasz Holeczek\"/>\\n' +\n  '  <meta name=\"keyword\" content=\"\"/>\\n' +\n  '  <link rel=\"shortcut icon\" href=\"img/favicon.png\"/>\\n' +\n  '\\n' +\n  '  <title></title>\\n' +\n  '\\n' +\n  '  <!-- Icons -->\\n' +\n  '  <link href=\"node_modules/font-awesome/css/font-awesome.min.css\" rel=\"stylesheet\"/>\\n' +\n  '  <link href=\"node_modules/simple-line-icons/css/simple-line-icons.css\" rel=\"stylesheet\"/>\\n' +\n  '\\n' +\n  '  <!-- Main styles for this application -->\\n' +\n  '  <link href=\"css/style.css\" rel=\"stylesheet\"/>\\n' +\n  '\\n' +\n  '</head>\\n' +\n  '\\n' +\n  '\\n' +\n  '<body class=\"app header-fixed sidebar-fixed aside-menu-fixed aside-menu-hidden\">\\n' +\n  '  <header class=\"app-header navbar\">\\n' +\n  '  <h1>I ♥ react-codemirror2</h1>\\n' +\n  '  ...\\n' +\n  '</header>\\n' +\n  '  <div class=\"app-body\">\\n' +\n  '    <div class=\"sidebar\">\\n' +\n  '      ...\\n' +\n  '    </div>\\n' +\n  '    <!-- Main content -->\\n' +\n  '    <main class=\"main\">\\n' +\n  '\\n' +\n  '    </main>\\n' +\n  '    <aside class=\"aside-menu\">\\n' +\n  '      ...\\n' +\n  '    </aside>\\n' +\n  '  </div>\\n' +\n  '  <footer class=\"app-footer\">\\n' +\n  '    ...\\n' +\n  '  </footer>\\n' +\n  '\\n' +\n  '  <!-- Bootstrap and necessary plugins -->\\n' +\n  '  <script src=\"node_modules/jquery/dist/jquery.min.js\"></script>\\n' +\n  '  <script src=\"node_modules/popper.js/dist/umd/popper.min.js\"></script>\\n' +\n  '  <script src=\"node_modules/bootstrap/dist/js/bootstrap.min.js\"></script>\\n' +\n  '  <script src=\"node_modules/pace-progress/pace.min.js\"></script>\\n' +\n  '\\n' +\n  '  <!-- Plugins and scripts required by all views -->\\n' +\n  '  <script src=\"node_modules/chart.js/dist/Chart.min.js\"></script>\\n' +\n  '\\n' +\n  '  <!-- Main scripts -->\\n' +\n  '  <script src=\"js/app-config.js\"></script>\\n' +\n  '  <script src=\"js/app.js\"></script>\\n' +\n  '\\n' +\n  '</body>\\n' +\n  '</html>',\n};\n\nexport default sampleCode\n","import React, {Component} from 'react';\nimport { Card, CardHeader, CardBody, CardFooter, Form, FormGroup, Input } from 'reactstrap';\n\nimport {UnControlled as CodeMirror} from 'react-codemirror2'\nimport 'codemirror/lib/codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/xml/xml';\n\nimport sampleCode from './_examples';\n\n// const defaults = sampleCode\n\nclass CodeEditors extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      readOnly: false,\n      theme: 'eclipse',\n      mode: 'markdown',\n      code: sampleCode.markdown\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      mode: 'xml',\n      code: sampleCode.xml\n    });\n    if (this.editor.editor.options.autofocus) {\n      this.editor.editor.setSize('100%', '50vh')\n      this.editor.editor.focus();\n    }\n  }\n\n  render() {\n\n    const options = {\n      lineNumbers: true,\n      readOnly: this.state.readOnly,\n      mode: this.state.mode,\n      theme: this.state.theme,\n      autofocus: true\n    }\n\n    return (\n      <Card>\n        <CardHeader>\n          CodeMirror{' '}\n          <a href=\"https://coreui.io/pro/react/\" className=\"badge badge-danger\">CoreUI Pro Component</a>\n          <div className=\"card-header-actions\">\n            <a href=\"https://github.com/scniro/react-codemirror2\" rel=\"noopener noreferrer\" target=\"_blank\" className=\"card-header-action\">\n              <small className=\"text-muted\">docs</small>\n            </a>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <CodeMirror\n            ref={(node) => this.editor = node}\n            value={this.state.code}\n            options={options}\n            onBeforeChange={(editor, data, value) => { this.setState({value}); }}\n            onChange={(editor, metadata, value) => { }}\n          />\n        </CardBody>\n        <CardFooter>\n          <Form inline>\n            <FormGroup>\n                <Input type=\"select\" bsSize=\"sm\" name=\"theme\" id=\"theme\" onChange={(e) => this.changeTheme(e)} value={this.state.theme} >\n                  <option value=\"material\">material</option>\n                  <option value=\"eclipse\">eclipse</option>\n                </Input>\n            </FormGroup>\n            <FormGroup>\n                <Input type=\"select\" bsSize=\"sm\" name=\"mode\" id=\"mode\" onChange={(e) => this.changeMode(e)} value={this.state.mode} >\n                  <option value=\"markdown\">markdown</option>\n                  <option value=\"javascript\">javascript</option>\n                  <option value=\"xml\">html</option>\n                </Input>\n            </FormGroup>\n          </Form>\n        </CardFooter>\n      </Card>\n    );\n  }\n\n  changeMode(e) {\n    const mode = e.target.value;\n    this.setState({\n      mode: mode,\n      code: sampleCode[mode]\n    });\n    this.editor.editor.focus();\n  }\n\n  changeTheme(e) {\n    const theme = e.target.value;\n    this.setState({\n      theme: theme,\n    });\n  }\n\n  toggleReadOnly() {\n    this.setState({\n      readOnly: !this.state.readOnly\n    }, () => { this.editor.editor.focus() })\n  }\n}\n\nexport default CodeEditors;\n"],"sourceRoot":""}